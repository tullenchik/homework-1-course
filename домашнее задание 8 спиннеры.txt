//Задача 1. Спинеры
//Спиннер- модная игрушка с подшипником в основании, к которому прикреплены лопасти. Афанасий открыл бизнес по производству спиннеров. Он выяснил, что за спиннер, у которого N лопастей, покупатели готовы платить A+B*N рублей, но при этом покупатель не станет покупать спиннер, если его цена будет выше C рублей. Определите максимальное число лопастей спиннера, который согласится приобрести покупатель.
//Покупатель получает на вход три числа A,B,C (стоимость основания спиннера, стоимость одной лопасти и максимальная стоимость всего спиннера). Все числа-целые, положительные, не превосходящие 2*10^9, при этом A<=C.
//Программа должна вывести одно число- максимальне число лопастей спиннера
#include <iostream>//работа с консолью
using namespace std;//пространство имен стд
int main()
{
	setlocale(0, "");
	//объявление пременных
	int a, b, c, n = 1;
	cout << "Введите стоимость основания спиннера A: ";
	cin >> a;
	//проверки на дурака
	if (!cin)
	{
		cout << "Вы ввели не целочисленное число или вообще не число";
		return 0;
	}
	if (a <= 0)
	{
		cout << "Вы ввели не положительное число";
		return 0;
	}
	if (a > 2 * pow(10, 9))
	{
		cout << "Число больше 2*10^9";
		return 0;
	}
	cout << "\nВведите стоимость каждого спиннера: ";
	cin >> b;
	//проверки на дурака
	if (!cin)
	{
		cout << "Вы ввели не целочисленное число или вообще не число";
		return 0;
	}
	if (b <= 0)
	{
		cout << "Вы ввели не положительное число";
		return 0;
	}
	if (b > 2 * pow(10, 9))
	{
		cout << "Число больше 2*10^9";
		return 0;
	}
	cout << "\nВведите максимальную стоимость спиннера: ";
	cin >> c;
	//проверки на дурака
	if (!cin)
	{
		cout << "Вы ввели не целочисленное число или вообще не число";
		return 0;
	}
	if (c <= 0)
	{
		cout << "Вы ввели не положительное число";
		return 0;
	}
	if (c > 2 * pow(10, 9))
	{
		cout << "Число больше 2*10^9";
		return 0;
	}
	for (int i = 1; a + b * i <= c; i++)//фильтрация комбинаций удовлетворяющих условию задачи
	{
		n = i;
	}
	cout << "\nМаксимальное число лопастей спиннера: " << n;
}
//Задача 2. Снова спиннеры
//программа получает на вход одно положительное число M, не превосходящее 2*10^9- количество лопастей
//Программа должна вывести два целых числа- количество спиннеров с 3 лопостями и количество спиннеров с 4 лопостями. Если у задачи есть несоклько решений, нужно вывести любое из них. Если решений нет, то программа выводит 2 нуля.
#include<iostream>//работа с консолью
using namespace std;//пространство имен стд
int main()
{
	setlocale(0, "");//русифкация
	//объявление переменных
	int m, t = 0, r= 0;//количество лопастей
	cout << "Введите количество лопастей, которое имеется у Дениса: ";
	cin >>m;
	//проверки на дурака
	if (!cin)
	{
		cout << "Вы ввлени не целочисленное число или вообще не число";
		return 0;
	}
	if (m > 2 * pow(10, 9))
	{
		cout << "Число больеш 2*10^9, что не соотвествует условию задач";
		return 0;
	}
	if (m <= 0)
	{
		cout << "Вы ввели не положительное число";
		return 0;
	}
	if (m < 3)//если Денис не может использовать ровно m лопостей
	{
		cout << "\nКоличество спиннеров с 3 лопостями: 0";
		cout << "\nКоличество спиннеров с 4 лопостями: 0";
		return 0;
	}
	for (int i = 1; i <= m / 3; i++)//фильтрация уомбинаций, которые подходят к условию задачи
	{
		for(int j = 1; j < m / 4; j++)
		{
			if (m == 3 * i + 4 * j)
			{
				t = i;
				r = j;
			}
		}
	}
	cout << "\nКоличество спиннеров с 3 лопостями: " << t;//вывод требуемых чисел
	cout << "\nКоличество спиннеров с 4 лопостями: " << r;
}
//Задача 3. Не про спиннеры
//Программа получает на вход два числа N и M - размеры исходного листа. Все числа - целые положительные, не превосходящие 75000
//Программа должны вывсети одно число- количество прясоугольников, которые можно вырезать из данного листа бумаги
#include<iostream>
using namespace std;
int main()
{
	setlocale(0, "");//русификация
	//объявление переменных
	int n, m,count=0;
	cout << "Введите ширину листа N: ";//ввод данных
	cin >> n;
	cout << "\nВведиет длинну листа M : ";
	cin >> m;
	//задача делится на два случая: где есть единичный элемент и не нужно считать столбцы/строки ( в зависимости какой элемент единичный) и остальные комбинации клеток
	if ((m!=1)&&(n!=1))//если лист не содержит единичных элементов: считаем сколько всего клето+ количество строк+количество столбцов+1 вариант, при котором весь лист закрашен
	{
		cout << "\nКоличество прямоугольников, которые можно вырезать из данного листа бумаги: " << n * m + n + m + 1;
		return 0;
	}
	else//если лист содержит единичный элемент: чем больший элемент мы отрезаем от листа, тем меньше таких элементов, следовательно, сначало отрезаем по одному квадратику и таких квадратов будет n или m ( в зависимости от того, что является единичным элементом), до того момента, когда весь лист является отрезанным прямоугольником.
	{
		if (m == 1)
		{
			for (int r = 0; r < n; r++)
			{
				count = count + (n - r);
			}
		}
		if (n == 1)
		{
			for (int r = 0; r < m; r++)
			{
				count = count + (m - r);
			}
		}
	}
	cout << "\nКоличество прямоугольников, которые можно вырезать из данного листа бумаги: " << count;//вывод количество отрезанных прямоугольников, если есть единичный элеменет
}
//Задача 4. Плацкартный вагон
//В плацкартном вагоне 54 места. Вагон разбит на 9 купе (места 1-36 слева, 37-54 справа а плацкарте; в каждом купе 6 места).
//Программа аолучает на вход число n-колиечтсво свободных мест. Программа выводит одно целое число-максимальное число подряд идущих свободных купе
#include <iostream>
using namespace std;
int main()
{
	setlocale(0, "");//русификация
	//объявление переменных
	int n,countkupe=0, countpodrudkupe=0;
	int plackart1[6] = { 1,2,3,4,53,54 };//объявление всех мест в плацкартах
	int plackart2[6] = { 5,6,7,8,51,52 };
	int plackart3[6] = { 9,10,11,12,49,50 };
	int plackart4[6] = { 13,14,15,16,47,48 };
	int plackart5[6] = { 17,18,19,20,45,46 };
	int plackart6[6] = { 21,22,23,24,43,44 };
	int plackart7[6] = { 25,26,27,28,41,42 };
	int plackart8[6] = { 29,30,31,32,39,40 };
	int plackart9[6] = { 33,34,35,36,37,38 };
	int count[9] = { 0,0,0,0,0,0,0,0,0 };
	cout << "Введите количество свободных мест: ";
	cin >> n;//ввод количество свободных мест
	//проверки на дурака
	if (!cin)
	{
		cout << "Вы ввели не число";
		return 0;
	}
	if (!((1 <= n) && (n <= 54)))
	{
		cout << "Вы ввели число, которое не удовлетворяет условию задачи";
		return 0;
	}
	int* sm = new int[n];//sm-Свободные Места
	for (int i = 0; i < n; i++)//заполнение динамического массива
	{
		cin>>sm[i];
		if (!cin)
		{
			cout << "Вы ввели число, которое не удовлетворякт условию задачи";
			return 0;
		}
	}
	for (int i = 0; i < n; i++)	//еще одна проверка на дурака
	{
		if (!((sm[i] >= 1) && (sm[i] <= 54)))
		{
			cout << "Вы ввели число, которое не удовлетворякт условию задачи";
			return 0;
		}
	}
	for (int i = 0; i < n; i++)//сравним динамический массив с свободными местами с каждым массивом-плацкартом, в которых записаны места поезда
	{
		for (int j = 0; j < 6; j++)
		{
			if (sm[i] == plackart1[j])
			{
				count[1-1]++;
			}
			if (sm[i] == plackart2[j])
			{
				count[2-1]++;
			}
			if (sm[i] == plackart3[j])
			{
				count[3-1]++;
			}
			if (sm[i] == plackart4[j])
			{
				count[4-1]++;
			}
			if (sm[i] == plackart5[j])
			{
				count[5-1]++;
			}
			if (sm[i] == plackart6[j])
			{
				count[6-1]++;
			}
			if (sm[i] == plackart7[j])
			{
				count[7-1]++;
			}
			if (sm[i] == plackart8[j])
			{
				count[8-1]++;
			}
			if (sm[i] == plackart9[j])
			{
				count[9-1]++;
			}
		}
	}
	for (int i = 0; i < 9; i++)
	{
		if (count[i] == 6)//если количество мест из данных массивов-плацкартов есть в динамическом массиве, в котором содержится номера свободных мест, то будем считать такой плацкарт свободным и подсчитаем их количество
		{
			countkupe++;
			if (count[i] = count[i - 1])//если и предыдущий массив-плацкарт является свободным, то подсчитаем количсевто подряд идущих свободных массивов
			{
				countpodrudkupe++;
			}
		}
	}
	cout << "\nКоличество свободных купе: " << countkupe;
	cout << "\nКоличество свободных купе, которые идут подряд: " << countpodrudkupe;
}
//в кинотеатре один ряд мест N+2 (где крайние местса занимают персоналы кинотеатра). В него заходи K школьников, и садятся как можно дальше от занятого места.
//найти количество свободных мест с двух сторон от школьника, который последним занял место в ряду.
#include <iostream>//для работы с консолью
#include <math.h>//для округления до меньшего числа
using namespace std;

int recursia(int n)
{
	int* mesta = new int[n + 2];
	for (int i = 0; i < n + 2; i++)
	{
		mesta[i] = 0;
	}
	int m = n;
	m = (m / 2) + 1;//обозначаем середину
	mesta[m] = 1;
	for (int i = 0; i < n + 2; i++)
	{
		return mesta[i];
	}
}

int main()
{
	setlocale(0, "");//русификация
	//объявление переменных
	int n, k, count=0,i=1;
	cout << "Введите количество мест в кинотеатре: ";//введение данных
	cin >> n;
	//проверки на дурака
	if (!cin)
	{
		cout << "Вы ввели не число";
		return 0;
	}
	if (!((n >= 1) && (n < pow(10, 18))))
	{
		cout << "Вы ввели значения не удовлетворяющие условию задач";
		return 0;
	}
	int* mesta = new int[n ];//создание "кинотеатра"
	int* mesta1 = new int[n];
	for (int j = 0; j < n; j++)
	{
		mesta[j] = 0;
	}
	cout << "\nВведите количество школьников: ";//ввод данных
	cin >> k;
	//проверки на дураков
	if (!cin)
	{
		cout << "Вы ввели не число";
		return 0;
	}
	if (!((k >= 1) && (k <= n)))
	{
		cout << "Вы ввели значения не удовлетворяющие условию задач";
		return 0;
	}//количество школьников, большее 1
	while (k != 1)
	{
		n = (n - k % 2) / 2;//вычисление количество клеток в предыдущем случае(где мы будем ставить середину)
		k = k / 2;//количество школьников поделится столько раз, сколько потребуется, чтобы перейти на правильную часть ряда
	}
	cout << ((n - 1) / 2)<<" " << n / 2;//решение для 1 школьника или вычисление середины полученных клеток из предыдущего цикла
}